#!/usr/bin/env node
const download = require("download-git-repo");
const https = require("https");
const request = require("request");
const program = require("commander");
const exists = require("fs").existsSync;
const path = require("path");
const ora = require("ora");
const home = require("user-home"); //Users/beisen
const tildify = require("tildify");
const chalk = require("chalk");
const inquirer = require("inquirer");
const rm = require("rimraf").sync;
const logger = require("../lib/logger");
const generate = require("../lib/generate");
const checkVersion = require("../lib/check-version");
const getRepoPath = require("../lib/getRepoPath");
const {
    TALENTUI_PB_COMPONENTS,
    TALENTUI_PROJECT,
    TALENTUI_COMPONENT,
    TYPE_COMPOENT,
    TYPE_PB_COMPONENTS,
    TYPE_PROJECT,
    TALENTUI_DLL_BUILDER,
    TYPE_DLL_BUILDER,
    TALENTJS_COMPONENT,
    TYPE_TALENTJS_COMPONENT
} = require("../lib/constants");
// const warnings = require('../lib/warnings')
// const localPath = require('../lib/local-path')

// const isLocalPath = localPath.isLocalPath
// const getTemplatePath = localPath.getTemplatePath

/**
 * Usage.
 */

program
    .usage("[project-name]")
    .option("-c, --clone", "use git clone")
    .option("--offline", "use cached template");

/**
 * Help.
 */
program.on("--help", () => {
    console.log("  Examples:");
    console.log();
    console.log(
        chalk.gray("    # create a new project with an official template")
    );
    console.log("    $ talent init  my-project-name");
    console.log();
});

/****解析参数****/
function help() {
    program.parse(process.argv);
    if (program.args.length < 1) return program.help();
}
help();

let tmp; //临时项目下载路径，离线的时候使用这里作为离线模版
let rawName = program.args[0]; //第一个参数：输入的文件夹名称
// const hasSlash = template.indexOf("/") > -1;

const inPlace = !rawName || rawName === ".";
const name = inPlace ? path.relative("../", process.cwd()) : rawName;
const to = path.resolve(rawName || ".");
const clone = program.clone || false; //是否是git clone通过 --clone指定

checkTargetDirectory();

//检测目标文件夹是否存在
function checkTargetDirectory() {
    if (exists(to)) {
        inquirer
            .prompt([
                {
                    type: "confirm",
                    message: inPlace ? "在当前文件夹下生成项目?" : "目标文件夹已存在，是否继续?",
                    name: "ok"
                }
            ])
            .then(answers => {
                if (answers.ok) {
                    selectProjectType();
                }
            })
            .catch(logger.fatal);
    } else {
        selectProjectType();
    }
}

//选择：1.组件 2.项目 3.pageBuilder组件开发模版
function selectProjectType() {
    inquirer
        .prompt([
            {
                type: "list",
                message: "选择开发类别",
                choices: [
                    TALENTUI_PROJECT,
                    TALENTUI_COMPONENT,
                    TALENTUI_PB_COMPONENTS,
                    TALENTUI_DLL_BUILDER,
                    TALENTJS_COMPONENT
                ],
                name: "projectType"
            }
        ])
        .then(answers => {
            let choice = answers.projectType;
            switch (choice) {
                case TALENTUI_PROJECT://项目
                    selectEngine();
                    break;
                case TALENTUI_COMPONENT://组件
                    generateTmp(TYPE_COMPOENT);
                    break;
                case TALENTUI_PB_COMPONENTS://pb组件开发
                    generateTmp(TYPE_PB_COMPONENTS);
                    global['talentui_info']['pbComponents'] = true;//标记，用于ask appId
                    break;
                case TALENTUI_DLL_BUILDER://dll打包项目
                    askDllList();                    
                    break;
                case TALENTJS_COMPONENT://袁园姐的组件项目
                    global['talentui_info']['talentjs_component'] = true;//标记，用于ask 某些字段                    
                    generateTmp(TYPE_TALENTJS_COMPONENT)
                    break;
            }
        });
}
//输入需要打包到dll的依赖
function askDllList() {
    inquirer
    .prompt([
        {
            type: "input",
            message: "输入需要打包的依赖及版本号，如react@16.1.0，并以空格分隔：",
            name: "dllList"
        }
    ])
    .then(answers => {
       //处理输入的内容
       global['talentui_info']['dllList'] = answers.dllList.split(/\s+/g);//拆分为数组，兼容多个连续空格
       generateTmp(TYPE_DLL_BUILDER);
    });
}
// 选择模版 react or vue
function selectEngine() {
    inquirer
        .prompt([
            {
                type: "list",
                message: "选择项目开发框架",
                choices: ["react", "vue"],
                name: "engine"
            }
        ])
        .then(answers => {
            engine = answers.engine;
            generateTmp(TYPE_PROJECT, engine);
        });
}

//生成临时模版下载路径，==> 选取项目指定的分支，拼接拿到官方模版GitHub地址,==>执行下载 run
function generateTmp(type, engine = "") {
    tmp = path.join(home, "talent-ui-templates", type, engine);
    //离线操作：使用缓存模版
    if (program.offline) {
        console.log(`> Use cached template at ${chalk.yellow(tildify(tmp))}`);
        template = tmp;
    }
    const officialTemplate = getRepoPath(type, engine);
    chooseBranch(officialTemplate);
    // run(officialTemplate);
}
//获取分支分支列表，并选取分支
function chooseBranch(officialTemplate) {
    const owner = officialTemplate.split("/")[0]; //所有者
    const repo = officialTemplate.split("/")[1]; //项目名称
    const url = `https://api.github.com/repos/${owner}/${repo}/branches`; //https://developer.github.com/v3/repos/branches/#list-branches
    const spinner = ora("获取项目分支列表");
    spinner.start();
    var options = {
        url: url,
        headers: {
            "User-Agent": "neove"
        }
    };
    request(options, function(error, response, body) {
        if (!error && response.statusCode == 200) {
            spinner.stop();
            var info = JSON.parse(body);
            const choices = info.map(item => item.name);
            inquirer
                .prompt([
                    {
                        type: "list",
                        message: "选择项目分支",
                        choices: choices,
                        name: "branch"
                    }
                ])
                .then(answers => {
                    const branch = answers.branch;
                    const repoPathWithBranch = `${officialTemplate}#${branch}`;
                    run(repoPathWithBranch);
                });
        }
    });
}

//检查通过后，调用run方法 下载和生成模版
function run(officialTemplate) {
    //检查是否是本地模版 待完善
    if (false) {
        //do something here
    } else {
        //checkVersion 版本检测
        checkVersion(() => {
            //这里根据是否有template 是否有 / 判断是否使用官方的模版还是第三方的模版
            if (true) {
                //下载官方的模版
                downloadAndGenerate(officialTemplate);
            } else {
                //扩展 第三方模版下载
            }
        });
    }
}

//下载并生成模版项目
function downloadAndGenerate(template) {
    const spinner = ora("downloading template"); //Elegant terminal spinner 优雅的转圈圈....
    spinner.start();
    //如果本地存在的话，删除掉
    if (exists(tmp)) rm(tmp);
    //下载并在回调中处理 download(repository, destination, options, callback)
    download(template, tmp, { clone }, err => {
        spinner.stop();
        if (err)
            logger.fatal(
                "Failed to download repo " +
                    template +
                    ": " +
                    err.message.trim()
            );
        generate(name, tmp, to, err => {
            if (err) logger.fatal(err);
            console.log();
            logger.success('Generated "%s".', name);
        });
    });
}
